#!/usr/bin/env ruby

require "bundler/setup"
require "base64"
require "kramdown"
require "openssl"

Dir.glob("_protected/*") do |fn|
  File.open(fn) do |file|
    _, front_matter, body = file.read.split("---", 3).map(&:strip)
    html = Kramdown::Document.new(body.strip, input: "markdown").to_html

    # hash = OpenSSL::Digest.new('SHA256')
    # key = OpenSSL::KDF.pbkdf2_hmac(
    #   "password",
    #   salt: OpenSSL::Random.random_bytes(16),
    #   iterations: 20_000,
    #   length: hash.digest_length,
    #   hash: hash
    # )


    aes = OpenSSL::Cipher.new("AES-256-CBC")
    aes.encrypt
    aes.pkcs5_keyivgen("password", "a22b7f0d", 1, "MD5")

    # key = OpenSSL::PKCS5.pbkdf2_hmac(
    #   "password",
    #   OpenSSL::Random.random_bytes(16),
    #   20_000,
    #   aes.key_len,
    #   OpenSSL::Digest.new("SHA256")
    # )

    # aes.key = key
    # aes.iv = aes.random_iv
    thing = aes.update(html) + aes.final

    encrypted_body = Base64.strict_encode64(thing)

    # aes = OpenSSL::Cipher.new("AES-256-CBC")
    # aes.decrypt
    # aes.key = key

    # puts "#" * 90
    # puts aes.update(Base64.strict_decode64(encrypted_body)) + aes.final
    # puts "#" * 90


    hmac = OpenSSL::HMAC.hexdigest(
      "SHA256",
      Digest::SHA256.hexdigest("password"),
      encrypted_body
    )

    File.open("boop.md", "w") do |file|
      file.puts <<~EOF
        ---
        #{front_matter}
        encrypted: #{hmac}#{encrypted_body}
        ---
      EOF
    end
  end
end

# keysize: 8
# ivsize: 4
# salt: salt = WordArray.random(64/8);

# CryptoJS.lib.WordArray.random(64/8).toString();
# "6491606eb574c6e2"


# var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

    # cfg: Base.extend({
    #         keySize: 128/32,
    #         hasher: MD5,
    #         iterations: 1
    #     }),




# // Separate key and IV
# var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
# key.sigBytes = keySize * 4;
